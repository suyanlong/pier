digraph gocallvis {
    label="github.com/meshplus/pier/cmd/pier";
    labeljust="l";
    fontname="Arial";
    fontsize="14";
    rankdir="LR";
    bgcolor="lightgray";
    style="solid";
    penwidth="0.5";
    pad="0.0";
    nodesep="0.35";

    node [shape="ellipse" style="filled" fillcolor="honeydew" fontname="Verdana" penwidth="1.0" margin="0.05,0.0"];
    edge [minlen="2"]

    subgraph "cluster_focus" {
        bgcolor="#e6ecfa";
label="main";
labelloc="t";
labeljust="c";
fontsize="18";
        
        "github.com/meshplus/pier/cmd/pier.main" [ fillcolor="lightblue" label="main" penwidth="0.5" ]
        "github.com/meshplus/pier/cmd/pier.registerDID" [ fillcolor="lightblue" label="registerDID" penwidth="0.5" ]
        "github.com/meshplus/pier/cmd/pier.initClientWithKeyPath" [ fillcolor="lightblue" label="initClientWithKeyPath" penwidth="0.5" ]
        "github.com/meshplus/pier/cmd/pier.loadClient" [ fillcolor="lightblue" label="loadClient" penwidth="0.5" ]
        "github.com/meshplus/pier/cmd/pier.auditDID" [ label="auditDID" penwidth="0.5" fillcolor="lightblue" ]
        "github.com/meshplus/pier/cmd/pier.registerMethod" [ fillcolor="lightblue" label="registerMethod" penwidth="0.5" ]
        "github.com/meshplus/pier/cmd/pier.getPubKey" [ fillcolor="lightblue" label="getPubKey" penwidth="0.5" ]
        "github.com/meshplus/pier/cmd/pier.registerPier" [ fillcolor="lightblue" label="registerPier" penwidth="0.5" ]
        "github.com/meshplus/pier/cmd/pier.updateAppchain" [ fillcolor="lightblue" label="updateAppchain" penwidth="0.5" ]
        "github.com/meshplus/pier/cmd/pier.freezeAppchain" [ fillcolor="lightblue" label="freezeAppchain" penwidth="0.5" ]
        "github.com/meshplus/pier/cmd/pier.activateAppchain" [ fillcolor="lightblue" label="activateAppchain" penwidth="0.5" ]
        "github.com/meshplus/pier/cmd/pier.logoutAppchain" [ fillcolor="lightblue" label="logoutAppchain" penwidth="0.5" ]
        "github.com/meshplus/pier/cmd/pier.getAppchain" [ fillcolor="lightblue" label="getAppchain" penwidth="0.5" ]
        "github.com/meshplus/pier/cmd/pier.withdraw" [ fillcolor="lightblue" label="withdraw" penwidth="0.5" ]
        "github.com/meshplus/pier/cmd/pier.init$1" [ style="dotted,filled" fillcolor="lightblue" label="init$1" ]
        "github.com/meshplus/pier/cmd/pier.init$2" [ fillcolor="lightblue" label="init$2" style="dotted,filled" ]
        "github.com/meshplus/pier/cmd/pier.getIBTP" [ fillcolor="lightblue" label="getIBTP" penwidth="0.5" ]
        "github.com/meshplus/pier/cmd/pier.p2pID" [ fillcolor="lightblue" label="p2pID" penwidth="0.5" ]
        "github.com/meshplus/pier/cmd/pier.deployRule" [ label="deployRule" penwidth="0.5" fillcolor="lightblue" ]
        "github.com/meshplus/pier/cmd/pier.updateMasterRule" [ fillcolor="lightblue" label="updateMasterRule" penwidth="0.5" ]
        "github.com/meshplus/pier/cmd/pier.logoutRule" [ fillcolor="lightblue" label="logoutRule" penwidth="0.5" ]
        "github.com/meshplus/pier/cmd/pier.start" [ fillcolor="lightblue" label="start" penwidth="0.5" ]
        "github.com/meshplus/pier/cmd/pier.getVersion" [ fillcolor="lightblue" label="getVersion" penwidth="0.5" ]
        "github.com/meshplus/pier/cmd/pier.runPProf" [ fillcolor="lightblue" label="runPProf" penwidth="0.5" ]
        "github.com/meshplus/pier/cmd/pier.runPProf$1" [ fillcolor="lightblue" label="runPProf$1" style="dotted,filled" ]
        "github.com/meshplus/pier/cmd/pier.handleShutdown$1" [ fillcolor="lightblue" label="handleShutdown$1" style="dotted,filled" ]
        "github.com/meshplus/pier/cmd/pier.handleShutdown" [ penwidth="0.5" fillcolor="lightblue" label="handleShutdown" ]
        "github.com/meshplus/pier/cmd/pier.checkPlugin" [ fillcolor="lightblue" label="checkPlugin" penwidth="0.5" ]
        "github.com/meshplus/pier/cmd/pier.init$3" [ fillcolor="lightblue" label="init$3" style="dotted,filled" ]
        "github.com/meshplus/pier/cmd/pier.init" [ fillcolor="lightblue" label="init" penwidth="0.5" ]
        
        subgraph "cluster_github.com/fatih/color" {
        fillcolor="lightyellow";
fontname="Tahoma bold";
rank="sink";
label="color";
URL="/?f=github.com/fatih/color";
penwidth="0.8";
fontsize="16";
style="filled";
tooltip="package: github.com/fatih/color";
        
        "github.com/fatih/color.Red" [ fillcolor="moccasin" label="Red" penwidth="1.5" ]
        "github.com/fatih/color.Green" [ fillcolor="moccasin" label="Green" penwidth="1.5" ]
        
    }

        subgraph "cluster_github.com/go-playground/universal-translator" {
        fontsize="16";
fontname="Tahoma bold";
URL="/?f=github.com/go-playground/universal-translator";
tooltip="package: github.com/go-playground/universal-translator";
penwidth="0.8";
style="filled";
fillcolor="lightyellow";
rank="sink";
label="ut";
        
        "(*github.com/go-playground/universal-translator.ErrBadPluralDefinition).Error" [ fillcolor="moccasin" label="(*ErrBadPluralDefinition).Error" penwidth="1.5" ]
        "(*github.com/go-playground/universal-translator.ErrMissingLocale).Error" [ fillcolor="moccasin" label="(*ErrMissingLocale).Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_github.com/gogo/protobuf/proto" {
        style="filled";
label="proto";
tooltip="package: github.com/gogo/protobuf/proto";
rank="sink";
URL="/?f=github.com/gogo/protobuf/proto";
penwidth="0.8";
fontsize="16";
fillcolor="lightyellow";
fontname="Tahoma bold";
        
        "(*github.com/gogo/protobuf/proto.invalidUTF8Error).Error" [ fillcolor="moccasin" label="(*invalidUTF8Error).Error" penwidth="1.5" ]
        "(*github.com/gogo/protobuf/proto.RequiredNotSetError).Error" [ fillcolor="moccasin" label="(*RequiredNotSetError).Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_github.com/gorilla/websocket" {
        penwidth="0.8";
fillcolor="lightyellow";
URL="/?f=github.com/gorilla/websocket";
tooltip="package: github.com/gorilla/websocket";
fontsize="16";
style="filled";
fontname="Tahoma bold";
rank="sink";
label="websocket";
        
        "(*github.com/gorilla/websocket.CloseError).Error" [ fillcolor="moccasin" label="(*CloseError).Error" penwidth="1.5" ]
        "(*github.com/gorilla/websocket.netError).Error" [ fillcolor="moccasin" label="(*netError).Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_github.com/hyperledger/fabric/bccsp" {
        style="filled";
fontname="Tahoma bold";
label="bccsp";
URL="/?f=github.com/hyperledger/fabric/bccsp";
penwidth="0.8";
fontsize="16";
fillcolor="lightyellow";
rank="sink";
tooltip="package: github.com/hyperledger/fabric/bccsp";
        
        "(*github.com/hyperledger/fabric/bccsp.IdemixIssuerPublicKeyImporterError).Error" [ penwidth="1.5" fillcolor="moccasin" label="(*IdemixIssuerPublicKeyImporterError).Error" ]
        
    }

        subgraph "cluster_github.com/ipfs/go-ipfs-api" {
        penwidth="0.8";
fontsize="16";
style="filled";
fillcolor="lightyellow";
fontname="Tahoma bold";
tooltip="package: github.com/ipfs/go-ipfs-api";
rank="sink";
label="shell";
URL="/?f=github.com/ipfs/go-ipfs-api";
        
        "(*github.com/ipfs/go-ipfs-api.Error).Error" [ fillcolor="moccasin" label="(*Error).Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_github.com/libp2p/go-libp2p-core/crypto" {
        label="crypto";
URL="/?f=github.com/libp2p/go-libp2p-core/crypto";
penwidth="0.8";
fontsize="16";
style="filled";
fontname="Tahoma bold";
rank="sink";
fillcolor="lightyellow";
tooltip="package: github.com/libp2p/go-libp2p-core/crypto";
        
        "github.com/libp2p/go-libp2p-core/crypto.KeyPairFromStdKey" [ penwidth="1.5" fillcolor="moccasin" label="KeyPairFromStdKey" ]
        
    }

        subgraph "cluster_github.com/libp2p/go-libp2p-core/peer" {
        fillcolor="lightyellow";
rank="sink";
style="filled";
fontname="Tahoma bold";
label="peer";
URL="/?f=github.com/libp2p/go-libp2p-core/peer";
tooltip="package: github.com/libp2p/go-libp2p-core/peer";
penwidth="0.8";
fontsize="16";
        
        "github.com/libp2p/go-libp2p-core/peer.IDFromPublicKey" [ fillcolor="moccasin" label="IDFromPublicKey" penwidth="1.5" ]
        
    }

        subgraph "cluster_github.com/libp2p/go-libp2p-core/pnet" {
        style="filled";
tooltip="package: github.com/libp2p/go-libp2p-core/pnet";
penwidth="0.8";
fontsize="16";
fillcolor="lightyellow";
fontname="Tahoma bold";
rank="sink";
label="pnet";
URL="/?f=github.com/libp2p/go-libp2p-core/pnet";
        
        "(github.com/libp2p/go-libp2p-core/pnet.pnetErr).Error" [ penwidth="1.5" fillcolor="moccasin" label="(pnetErr).Error" ]
        
    }

        subgraph "cluster_github.com/libp2p/go-libp2p-swarm" {
        penwidth="0.8";
fontsize="16";
style="filled";
fillcolor="lightyellow";
rank="sink";
fontname="Tahoma bold";
label="swarm";
URL="/?f=github.com/libp2p/go-libp2p-swarm";
tooltip="package: github.com/libp2p/go-libp2p-swarm";
        
        "(*github.com/libp2p/go-libp2p-swarm.DialError).Error" [ fillcolor="moccasin" label="(*DialError).Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_github.com/libp2p/go-mplex" {
        fontsize="16";
fontname="Tahoma bold";
rank="sink";
label="multiplex";
tooltip="package: github.com/libp2p/go-mplex";
penwidth="0.8";
style="filled";
fillcolor="lightyellow";
URL="/?f=github.com/libp2p/go-mplex";
        
        "(github.com/libp2p/go-mplex.timeout).Error" [ fillcolor="moccasin" label="(timeout).Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_github.com/libp2p/go-yamux" {
        rank="sink";
label="yamux";
tooltip="package: github.com/libp2p/go-yamux";
style="filled";
fillcolor="lightyellow";
fontname="Tahoma bold";
penwidth="0.8";
fontsize="16";
URL="/?f=github.com/libp2p/go-yamux";
        
        "(*github.com/libp2p/go-yamux.Error).Error" [ fillcolor="moccasin" label="(*Error).Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_github.com/meshplus/bitxhub-kit/crypto/asym" {
        fontsize="16";
style="filled";
URL="/?f=github.com/meshplus/bitxhub-kit/crypto/asym";
tooltip="package: github.com/meshplus/bitxhub-kit/crypto/asym";
penwidth="0.8";
fontname="Tahoma bold";
rank="sink";
label="asym";
fillcolor="lightyellow";
        
        "github.com/meshplus/bitxhub-kit/crypto/asym.RestorePrivateKey" [ fillcolor="moccasin" label="RestorePrivateKey" penwidth="1.5" ]
        "github.com/meshplus/bitxhub-kit/crypto/asym.PrivKeyToStdKey" [ fillcolor="moccasin" label="PrivKeyToStdKey" penwidth="1.5" ]
        
    }

        subgraph "cluster_github.com/meshplus/bitxhub-kit/crypto/asym/ecdsa" {
        fontsize="16";
fillcolor="lightyellow";
label="ecdsa";
URL="/?f=github.com/meshplus/bitxhub-kit/crypto/asym/ecdsa";
penwidth="0.8";
style="filled";
fontname="Tahoma bold";
rank="sink";
tooltip="package: github.com/meshplus/bitxhub-kit/crypto/asym/ecdsa";
        
        "(*github.com/meshplus/bitxhub-kit/crypto/asym/ecdsa.PrivateKey).PublicKey" [ fillcolor="moccasin" label="(*PrivateKey).PublicKey" penwidth="1.5" ]
        "(*github.com/meshplus/bitxhub-kit/crypto/asym/ecdsa.PublicKey).Address" [ penwidth="1.5" fillcolor="moccasin" label="(*PublicKey).Address" ]
        "(*github.com/meshplus/bitxhub-kit/crypto/asym/ecdsa.PublicKey).Bytes" [ fillcolor="moccasin" label="(*PublicKey).Bytes" penwidth="1.5" ]
        
    }

        subgraph "cluster_github.com/meshplus/bitxhub-kit/fileutil" {
        fontname="Tahoma bold";
URL="/?f=github.com/meshplus/bitxhub-kit/fileutil";
tooltip="package: github.com/meshplus/bitxhub-kit/fileutil";
fontsize="16";
style="filled";
rank="sink";
label="fileutil";
penwidth="0.8";
fillcolor="lightyellow";
        
        "github.com/meshplus/bitxhub-kit/fileutil.Exist" [ fillcolor="moccasin" label="Exist" penwidth="1.5" ]
        
    }

        subgraph "cluster_github.com/meshplus/bitxhub-kit/hexutil" {
        label="hexutil";
URL="/?f=github.com/meshplus/bitxhub-kit/hexutil";
tooltip="package: github.com/meshplus/bitxhub-kit/hexutil";
penwidth="0.8";
style="filled";
fillcolor="lightyellow";
fontname="Tahoma bold";
rank="sink";
fontsize="16";
        
        "github.com/meshplus/bitxhub-kit/hexutil.Encode" [ fillcolor="moccasin" label="Encode" penwidth="1.5" ]
        
    }

        subgraph "cluster_github.com/meshplus/bitxhub-kit/log" {
        penwidth="0.8";
fontsize="16";
style="filled";
rank="sink";
label="log";
fillcolor="lightyellow";
fontname="Tahoma bold";
URL="/?f=github.com/meshplus/bitxhub-kit/log";
tooltip="package: github.com/meshplus/bitxhub-kit/log";
        
        "github.com/meshplus/bitxhub-kit/log.WithReportCaller" [ fillcolor="moccasin" label="WithReportCaller" penwidth="1.5" ]
        "github.com/meshplus/bitxhub-kit/log.WithPersist" [ fillcolor="moccasin" label="WithPersist" penwidth="1.5" ]
        "github.com/meshplus/bitxhub-kit/log.WithFilePath" [ fillcolor="moccasin" label="WithFilePath" penwidth="1.5" ]
        "github.com/meshplus/bitxhub-kit/log.WithFileName" [ fillcolor="moccasin" label="WithFileName" penwidth="1.5" ]
        "github.com/meshplus/bitxhub-kit/log.WithMaxSize" [ fillcolor="moccasin" label="WithMaxSize" penwidth="1.5" ]
        "github.com/meshplus/bitxhub-kit/log.WithMaxAge" [ fillcolor="moccasin" label="WithMaxAge" penwidth="1.5" ]
        "github.com/meshplus/bitxhub-kit/log.WithRotationTime" [ label="WithRotationTime" penwidth="1.5" fillcolor="moccasin" ]
        "github.com/meshplus/bitxhub-kit/log.Initialize" [ fillcolor="moccasin" label="Initialize" penwidth="1.5" ]
        "github.com/meshplus/bitxhub-kit/log.NewWithModule" [ fillcolor="moccasin" label="NewWithModule" penwidth="1.5" ]
        
    }

        subgraph "cluster_github.com/meshplus/bitxhub-kit/types" {
        fontsize="16";
fontname="Tahoma bold";
rank="sink";
URL="/?f=github.com/meshplus/bitxhub-kit/types";
tooltip="package: github.com/meshplus/bitxhub-kit/types";
penwidth="0.8";
fillcolor="lightyellow";
label="types";
style="filled";
        
        "(*github.com/meshplus/bitxhub-kit/types.Address).String" [ label="(*Address).String" penwidth="1.5" fillcolor="moccasin" ]
        "github.com/meshplus/bitxhub-kit/types.NewHash" [ fillcolor="moccasin" label="NewHash" penwidth="1.5" ]
        "(*github.com/meshplus/bitxhub-kit/types.Hash).String" [ fillcolor="moccasin" label="(*Hash).String" penwidth="1.5" ]
        
    }

        subgraph "cluster_github.com/meshplus/bitxhub-model/constant" {
        style="filled";
label="constant";
URL="/?f=github.com/meshplus/bitxhub-model/constant";
tooltip="package: github.com/meshplus/bitxhub-model/constant";
penwidth="0.8";
fontsize="16";
rank="sink";
fillcolor="lightyellow";
fontname="Tahoma bold";
        
        "(github.com/meshplus/bitxhub-model/constant.BoltContractAddress).Address" [ fillcolor="moccasin" label="(BoltContractAddress).Address" penwidth="1.5" ]
        
    }

        subgraph "cluster_github.com/meshplus/bitxhub-model/pb" {
        penwidth="0.8";
style="filled";
fontname="Tahoma bold";
label="pb";
URL="/?f=github.com/meshplus/bitxhub-model/pb";
fontsize="16";
fillcolor="lightyellow";
rank="sink";
tooltip="package: github.com/meshplus/bitxhub-model/pb";
        
        "(*github.com/meshplus/bitxhub-model/pb.Receipt).IsSuccess" [ penwidth="1.5" fillcolor="moccasin" label="(*Receipt).IsSuccess" ]
        
    }

        subgraph "cluster_github.com/meshplus/bitxid" {
        style="filled";
fillcolor="lightyellow";
fontname="Tahoma bold";
penwidth="0.8";
fontsize="16";
rank="sink";
label="bitxid";
URL="/?f=github.com/meshplus/bitxid";
tooltip="package: github.com/meshplus/bitxid";
        
        "(github.com/meshplus/bitxid.DID).GetRootMethod" [ penwidth="1.5" fillcolor="moccasin" label="(DID).GetRootMethod" ]
        
    }

        subgraph "cluster_github.com/meshplus/go-bitxhub-client" {
        fontsize="16";
style="filled";
fontname="Tahoma bold";
URL="/?f=github.com/meshplus/go-bitxhub-client";
tooltip="package: github.com/meshplus/go-bitxhub-client";
penwidth="0.8";
fillcolor="lightyellow";
rank="sink";
label="rpcx";
        
        "github.com/meshplus/go-bitxhub-client.WithPrivateKey" [ fillcolor="moccasin" label="WithPrivateKey" penwidth="1.5" ]
        "github.com/meshplus/go-bitxhub-client.WithNodesInfo" [ penwidth="1.5" fillcolor="moccasin" label="WithNodesInfo" ]
        "github.com/meshplus/go-bitxhub-client.WithTimeoutLimit" [ label="WithTimeoutLimit" penwidth="1.5" fillcolor="moccasin" ]
        "github.com/meshplus/go-bitxhub-client.New" [ fillcolor="moccasin" label="New" penwidth="1.5" ]
        "github.com/meshplus/go-bitxhub-client.String" [ fillcolor="moccasin" label="String" penwidth="1.5" ]
        "github.com/meshplus/go-bitxhub-client.Bytes" [ fillcolor="moccasin" label="Bytes" penwidth="1.5" ]
        "(*github.com/meshplus/go-bitxhub-client.ChainClient).InvokeBVMContract" [ penwidth="1.5" fillcolor="moccasin" label="(*ChainClient).InvokeBVMContract" ]
        "(*github.com/meshplus/go-bitxhub-client.ChainClient).GetTransaction" [ fillcolor="moccasin" label="(*ChainClient).GetTransaction" penwidth="1.5" ]
        "(*github.com/meshplus/go-bitxhub-client.ChainClient).DeployContract" [ fillcolor="moccasin" label="(*ChainClient).DeployContract" penwidth="1.5" ]
        
    }

        subgraph "cluster_github.com/meshplus/pier/cmd/pier/client" {
        fillcolor="lightyellow";
rank="sink";
label="client";
URL="/?f=github.com/meshplus/pier/cmd/pier/client";
tooltip="package: github.com/meshplus/pier/cmd/pier/client";
style="filled";
fontsize="16";
fontname="Tahoma bold";
penwidth="0.8";
        
        "github.com/meshplus/pier/cmd/pier/client.LoadClientCMD" [ fillcolor="moccasin" label="LoadClientCMD" penwidth="1.5" ]
        
    }

        subgraph "cluster_github.com/meshplus/pier/internal/app" {
        style="filled";
label="app";
tooltip="package: github.com/meshplus/pier/internal/app";
penwidth="0.8";
fontsize="16";
rank="sink";
URL="/?f=github.com/meshplus/pier/internal/app";
fillcolor="lightyellow";
fontname="Tahoma bold";
        
        "(*github.com/meshplus/pier/internal/app.Pier).Type" [ fillcolor="moccasin" label="(*Pier).Type" penwidth="1.5" ]
        "(*github.com/meshplus/pier/internal/app.Pier).Stop" [ fillcolor="moccasin" label="(*Pier).Stop" penwidth="1.5" ]
        "(*github.com/meshplus/pier/internal/app.Pier).Start" [ fillcolor="moccasin" label="(*Pier).Start" penwidth="1.5" ]
        "github.com/meshplus/pier/internal/app.NewUnionPier" [ penwidth="1.5" fillcolor="moccasin" label="NewUnionPier" ]
        "github.com/meshplus/pier/internal/app.NewPier" [ penwidth="1.5" fillcolor="moccasin" label="NewPier" ]
        
    }

        subgraph "cluster_github.com/meshplus/pier/internal/loggers" {
        fontname="Tahoma bold";
URL="/?f=github.com/meshplus/pier/internal/loggers";
tooltip="package: github.com/meshplus/pier/internal/loggers";
penwidth="0.8";
fontsize="16";
style="filled";
fillcolor="lightyellow";
rank="sink";
label="loggers";
        
        "github.com/meshplus/pier/internal/loggers.InitializeLogger" [ fillcolor="moccasin" label="InitializeLogger" penwidth="1.5" ]
        
    }

        subgraph "cluster_github.com/meshplus/pier/internal/repo" {
        tooltip="package: github.com/meshplus/pier/internal/repo";
rank="sink";
label="repo";
URL="/?f=github.com/meshplus/pier/internal/repo";
fillcolor="lightyellow";
fontname="Tahoma bold";
penwidth="0.8";
fontsize="16";
style="filled";
        
        "github.com/meshplus/pier/internal/repo.PathRootWithDefault" [ fillcolor="moccasin" label="PathRootWithDefault" penwidth="1.5" ]
        "github.com/meshplus/pier/internal/repo.UnmarshalConfig" [ fillcolor="moccasin" label="UnmarshalConfig" penwidth="1.5" ]
        "github.com/meshplus/pier/internal/repo.SetPath" [ fillcolor="moccasin" label="SetPath" penwidth="1.5" ]
        "github.com/meshplus/pier/internal/repo.Initialize" [ fillcolor="moccasin" label="Initialize" penwidth="1.5" ]
        "github.com/meshplus/pier/internal/repo.KeyPath" [ fillcolor="moccasin" label="KeyPath" penwidth="1.5" ]
        "github.com/meshplus/pier/internal/repo.LoadNodePrivateKey" [ fillcolor="moccasin" label="LoadNodePrivateKey" penwidth="1.5" ]
        "github.com/meshplus/pier/internal/repo.PluginPath" [ fillcolor="moccasin" label="PluginPath" penwidth="1.5" ]
        
    }

        subgraph "cluster_github.com/pkg/errors" {
        penwidth="0.8";
fontsize="16";
rank="sink";
URL="/?f=github.com/pkg/errors";
tooltip="package: github.com/pkg/errors";
style="filled";
fillcolor="lightyellow";
fontname="Tahoma bold";
label="errors";
        
        "(*github.com/pkg/errors.withMessage).Error" [ fillcolor="moccasin" label="(*withMessage).Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_github.com/sirupsen/logrus" {
        penwidth="0.8";
style="filled";
rank="sink";
label="logrus";
URL="/?f=github.com/sirupsen/logrus";
tooltip="package: github.com/sirupsen/logrus";
fontsize="16";
fillcolor="lightyellow";
fontname="Tahoma bold";
        
        "(*github.com/sirupsen/logrus.Entry).Error" [ fillcolor="moccasin" label="(*Entry).Error" penwidth="1.5" ]
        "(*github.com/sirupsen/logrus.Entry).Info" [ fillcolor="moccasin" label="(*Entry).Info" penwidth="1.5" ]
        
    }

        subgraph "cluster_github.com/syndtr/goleveldb/leveldb/errors" {
        penwidth="0.8";
style="filled";
rank="sink";
tooltip="package: github.com/syndtr/goleveldb/leveldb/errors";
fontsize="16";
fillcolor="lightyellow";
fontname="Tahoma bold";
label="errors";
URL="/?f=github.com/syndtr/goleveldb/leveldb/errors";
        
        "(*github.com/syndtr/goleveldb/leveldb/errors.ErrCorrupted).Error" [ fillcolor="moccasin" label="(*ErrCorrupted).Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_github.com/syndtr/goleveldb/leveldb/storage" {
        penwidth="0.8";
fontsize="16";
URL="/?f=github.com/syndtr/goleveldb/leveldb/storage";
style="filled";
fillcolor="lightyellow";
fontname="Tahoma bold";
rank="sink";
label="storage";
tooltip="package: github.com/syndtr/goleveldb/leveldb/storage";
        
        "(*github.com/syndtr/goleveldb/leveldb/storage.ErrCorrupted).Error" [ fillcolor="moccasin" label="(*ErrCorrupted).Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_github.com/tidwall/gjson" {
        penwidth="0.8";
fontsize="16";
style="filled";
fontname="Tahoma bold";
rank="sink";
label="gjson";
URL="/?f=github.com/tidwall/gjson";
tooltip="package: github.com/tidwall/gjson";
fillcolor="lightyellow";
        
        "github.com/tidwall/gjson.Get" [ fillcolor="moccasin" label="Get" penwidth="1.5" ]
        "(github.com/tidwall/gjson.Result).String" [ fillcolor="moccasin" label="(Result).String" penwidth="1.5" ]
        
    }

        subgraph "cluster_github.com/urfave/cli" {
        fontsize="16";
style="filled";
fontname="Tahoma bold";
URL="/?f=github.com/urfave/cli";
tooltip="package: github.com/urfave/cli";
penwidth="0.8";
rank="sink";
label="cli";
fillcolor="lightyellow";
        
        "github.com/urfave/cli.NewApp" [ fillcolor="moccasin" label="NewApp" penwidth="1.5" ]
        "(*github.com/urfave/cli.Context).String" [ fillcolor="moccasin" label="(*Context).String" penwidth="1.5" ]
        "(*github.com/urfave/cli.Context).GlobalString" [ fillcolor="moccasin" label="(*Context).GlobalString" penwidth="1.5" ]
        "github.com/urfave/cli.HandleAction" [ fillcolor="moccasin" label="HandleAction" penwidth="1.5" ]
        "(*github.com/urfave/cli.App).Run" [ fillcolor="moccasin" label="(*App).Run" penwidth="1.5" ]
        "(*github.com/urfave/cli.errRequiredFlags).Error" [ fillcolor="moccasin" label="(*errRequiredFlags).Error" penwidth="1.5" ]
        "(*github.com/urfave/cli.ExitError).Error" [ fillcolor="moccasin" label="(*ExitError).Error" penwidth="1.5" ]
        "(github.com/urfave/cli.MultiError).Error" [ fillcolor="moccasin" label="(MultiError).Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_go.uber.org/multierr" {
        fontsize="16";
rank="sink";
tooltip="package: go.uber.org/multierr";
penwidth="0.8";
style="filled";
fillcolor="lightyellow";
fontname="Tahoma bold";
label="multierr";
URL="/?f=go.uber.org/multierr";
        
        "(*go.uber.org/multierr.multiError).Error" [ fillcolor="moccasin" label="(*multiError).Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_golang.org/x/net/http2" {
        fillcolor="lightyellow";
rank="sink";
tooltip="package: golang.org/x/net/http2";
fontsize="16";
style="filled";
fontname="Tahoma bold";
label="http2";
URL="/?f=golang.org/x/net/http2";
penwidth="0.8";
        
        "(golang.org/x/net/http2.GoAwayError).Error" [ fillcolor="moccasin" label="(GoAwayError).Error" penwidth="1.5" ]
        "(golang.org/x/net/http2.connError).Error" [ penwidth="1.5" fillcolor="moccasin" label="(connError).Error" ]
        "(golang.org/x/net/http2.StreamError).Error" [ label="(StreamError).Error" penwidth="1.5" fillcolor="moccasin" ]
        "(golang.org/x/net/http2.ConnectionError).Error" [ fillcolor="moccasin" label="(ConnectionError).Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_google.golang.org/grpc/internal/status" {
        tooltip="package: google.golang.org/grpc/internal/status";
style="filled";
fillcolor="lightyellow";
label="status";
rank="sink";
URL="/?f=google.golang.org/grpc/internal/status";
penwidth="0.8";
fontsize="16";
fontname="Tahoma bold";
        
        "(*google.golang.org/grpc/internal/status.Error).Error" [ fillcolor="moccasin" label="(*Error).Error" penwidth="1.5" ]
        
    }

        subgraph "cluster_google.golang.org/grpc/internal/transport" {
        fontsize="16";
fillcolor="lightyellow";
fontname="Tahoma bold";
penwidth="0.8";
style="filled";
rank="sink";
label="transport";
URL="/?f=google.golang.org/grpc/internal/transport";
tooltip="package: google.golang.org/grpc/internal/transport";
        
        "(google.golang.org/grpc/internal/transport.ConnectionError).Error" [ fillcolor="moccasin" label="(ConnectionError).Error" penwidth="1.5" ]
        "(google.golang.org/grpc/internal/transport.PerformedIOError).Error" [ fillcolor="moccasin" label="(PerformedIOError).Error" penwidth="1.5" ]
        
    }

    }

    "github.com/meshplus/pier/cmd/pier.main" -> "github.com/urfave/cli.NewApp" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "github.com/meshplus/pier/cmd/pier/client.LoadClientCMD" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.registerDID" -> "(*github.com/urfave/cli.Context).String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.initClientWithKeyPath" -> "(*github.com/urfave/cli.Context).GlobalString" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.initClientWithKeyPath" -> "github.com/meshplus/pier/internal/repo.PathRootWithDefault" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.initClientWithKeyPath" -> "github.com/meshplus/pier/internal/repo.UnmarshalConfig" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.initClientWithKeyPath" -> "github.com/meshplus/bitxhub-kit/crypto/asym.RestorePrivateKey" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.loadClient" -> "(*github.com/urfave/cli.Context).GlobalString" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.loadClient" -> "github.com/meshplus/pier/internal/repo.PathRootWithDefault" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.loadClient" -> "github.com/meshplus/pier/internal/repo.SetPath" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.loadClient" -> "github.com/meshplus/pier/internal/repo.UnmarshalConfig" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.loadClient" -> "github.com/meshplus/bitxhub-kit/crypto/asym.RestorePrivateKey" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.loadClient" -> "github.com/meshplus/go-bitxhub-client.WithPrivateKey" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.loadClient" -> "github.com/meshplus/go-bitxhub-client.WithNodesInfo" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.loadClient" -> "github.com/meshplus/go-bitxhub-client.WithTimeoutLimit" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.loadClient" -> "github.com/meshplus/go-bitxhub-client.New" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.initClientWithKeyPath" -> "github.com/meshplus/pier/cmd/pier.loadClient" [  ]
    "github.com/meshplus/pier/cmd/pier.initClientWithKeyPath" -> "(*github.com/meshplus/bitxhub-kit/crypto/asym/ecdsa.PrivateKey).PublicKey" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.initClientWithKeyPath" -> "(*github.com/meshplus/bitxhub-kit/crypto/asym/ecdsa.PublicKey).Address" [ color="saddlebrown" style="dashed" ]
    "github.com/meshplus/pier/cmd/pier.registerDID" -> "github.com/meshplus/pier/cmd/pier.initClientWithKeyPath" [  ]
    "github.com/meshplus/pier/cmd/pier.registerDID" -> "(github.com/meshplus/bitxid.DID).GetRootMethod" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.registerDID" -> "(*github.com/meshplus/bitxhub-kit/types.Address).String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.registerDID" -> "(github.com/meshplus/bitxhub-model/constant.BoltContractAddress).Address" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.registerDID" -> "github.com/meshplus/go-bitxhub-client.String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.registerDID" -> "github.com/meshplus/go-bitxhub-client.Bytes" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.registerDID" -> "(*github.com/meshplus/bitxhub-model/pb.Receipt).IsSuccess" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.registerDID" -> "(*github.com/meshplus/go-bitxhub-client.ChainClient).InvokeBVMContract" [ color="saddlebrown" style="dashed" ]
    "github.com/urfave/cli.HandleAction" -> "github.com/meshplus/pier/cmd/pier.registerDID" [ style="dashed" color="saddlebrown" ]
    "github.com/urfave/cli.HandleAction" -> "github.com/meshplus/pier/cmd/pier.auditDID" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.registerMethod" -> "(*github.com/urfave/cli.Context).String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.getPubKey" -> "github.com/meshplus/bitxhub-kit/crypto/asym.RestorePrivateKey" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.getPubKey" -> "(*github.com/meshplus/bitxhub-kit/crypto/asym/ecdsa.PrivateKey).PublicKey" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.getPubKey" -> "(*github.com/meshplus/bitxhub-kit/crypto/asym/ecdsa.PublicKey).Bytes" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.registerMethod" -> "github.com/meshplus/pier/cmd/pier.getPubKey" [  ]
    "github.com/meshplus/pier/cmd/pier.registerMethod" -> "github.com/meshplus/pier/cmd/pier.initClientWithKeyPath" [  ]
    "github.com/meshplus/pier/cmd/pier.registerMethod" -> "(*github.com/meshplus/bitxhub-kit/types.Address).String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.registerMethod" -> "(github.com/meshplus/bitxhub-model/constant.BoltContractAddress).Address" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.registerMethod" -> "github.com/meshplus/go-bitxhub-client.String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.registerMethod" -> "(*github.com/meshplus/bitxhub-model/pb.Receipt).IsSuccess" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.registerMethod" -> "(*github.com/meshplus/go-bitxhub-client.ChainClient).InvokeBVMContract" [ style="dashed" color="saddlebrown" ]
    "github.com/urfave/cli.HandleAction" -> "github.com/meshplus/pier/cmd/pier.registerMethod" [ style="dashed" color="saddlebrown" ]
    "github.com/urfave/cli.HandleAction" -> "github.com/meshplus/pier/cmd/pier.registerPier" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.updateAppchain" -> "(*github.com/urfave/cli.Context).String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.updateAppchain" -> "github.com/meshplus/pier/cmd/pier.initClientWithKeyPath" [  ]
    "github.com/meshplus/pier/cmd/pier.updateAppchain" -> "(github.com/meshplus/bitxhub-model/constant.BoltContractAddress).Address" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.updateAppchain" -> "github.com/meshplus/go-bitxhub-client.String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.updateAppchain" -> "(*github.com/meshplus/bitxhub-model/pb.Receipt).IsSuccess" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.updateAppchain" -> "github.com/meshplus/pier/cmd/pier.getPubKey" [  ]
    "github.com/meshplus/pier/cmd/pier.updateAppchain" -> "github.com/tidwall/gjson.Get" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.updateAppchain" -> "(github.com/tidwall/gjson.Result).String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.updateAppchain" -> "(*github.com/meshplus/go-bitxhub-client.ChainClient).InvokeBVMContract" [ style="dashed" color="saddlebrown" ]
    "github.com/urfave/cli.HandleAction" -> "github.com/meshplus/pier/cmd/pier.updateAppchain" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.freezeAppchain" -> "(*github.com/urfave/cli.Context).String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.freezeAppchain" -> "github.com/meshplus/pier/cmd/pier.initClientWithKeyPath" [  ]
    "github.com/meshplus/pier/cmd/pier.freezeAppchain" -> "(github.com/meshplus/bitxhub-model/constant.BoltContractAddress).Address" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.freezeAppchain" -> "github.com/meshplus/go-bitxhub-client.String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.freezeAppchain" -> "(*github.com/meshplus/bitxhub-model/pb.Receipt).IsSuccess" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.freezeAppchain" -> "github.com/tidwall/gjson.Get" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.freezeAppchain" -> "(github.com/tidwall/gjson.Result).String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.freezeAppchain" -> "(*github.com/meshplus/go-bitxhub-client.ChainClient).InvokeBVMContract" [ style="dashed" color="saddlebrown" ]
    "github.com/urfave/cli.HandleAction" -> "github.com/meshplus/pier/cmd/pier.freezeAppchain" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.activateAppchain" -> "(*github.com/urfave/cli.Context).String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.activateAppchain" -> "github.com/meshplus/pier/cmd/pier.initClientWithKeyPath" [  ]
    "github.com/meshplus/pier/cmd/pier.activateAppchain" -> "(github.com/meshplus/bitxhub-model/constant.BoltContractAddress).Address" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.activateAppchain" -> "github.com/meshplus/go-bitxhub-client.String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.activateAppchain" -> "(*github.com/meshplus/bitxhub-model/pb.Receipt).IsSuccess" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.activateAppchain" -> "github.com/tidwall/gjson.Get" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.activateAppchain" -> "(github.com/tidwall/gjson.Result).String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.activateAppchain" -> "(*github.com/meshplus/go-bitxhub-client.ChainClient).InvokeBVMContract" [ style="dashed" color="saddlebrown" ]
    "github.com/urfave/cli.HandleAction" -> "github.com/meshplus/pier/cmd/pier.activateAppchain" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.logoutAppchain" -> "(*github.com/urfave/cli.Context).String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.logoutAppchain" -> "github.com/meshplus/pier/cmd/pier.initClientWithKeyPath" [  ]
    "github.com/meshplus/pier/cmd/pier.logoutAppchain" -> "(github.com/meshplus/bitxhub-model/constant.BoltContractAddress).Address" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.logoutAppchain" -> "github.com/meshplus/go-bitxhub-client.String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.logoutAppchain" -> "(*github.com/meshplus/bitxhub-model/pb.Receipt).IsSuccess" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.logoutAppchain" -> "github.com/tidwall/gjson.Get" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.logoutAppchain" -> "(github.com/tidwall/gjson.Result).String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.logoutAppchain" -> "(*github.com/meshplus/go-bitxhub-client.ChainClient).InvokeBVMContract" [ color="saddlebrown" style="dashed" ]
    "github.com/urfave/cli.HandleAction" -> "github.com/meshplus/pier/cmd/pier.logoutAppchain" [ color="saddlebrown" style="dashed" ]
    "github.com/meshplus/pier/cmd/pier.getAppchain" -> "(*github.com/urfave/cli.Context).String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.getAppchain" -> "github.com/meshplus/pier/cmd/pier.initClientWithKeyPath" [  ]
    "github.com/meshplus/pier/cmd/pier.getAppchain" -> "(github.com/meshplus/bitxhub-model/constant.BoltContractAddress).Address" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.getAppchain" -> "github.com/meshplus/go-bitxhub-client.String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.getAppchain" -> "(*github.com/meshplus/bitxhub-model/pb.Receipt).IsSuccess" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.getAppchain" -> "github.com/meshplus/bitxhub-kit/hexutil.Encode" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.getAppchain" -> "(*github.com/meshplus/go-bitxhub-client.ChainClient).InvokeBVMContract" [ style="dashed" color="saddlebrown" ]
    "github.com/urfave/cli.HandleAction" -> "github.com/meshplus/pier/cmd/pier.getAppchain" [ color="saddlebrown" style="dashed" ]
    "github.com/meshplus/pier/cmd/pier.withdraw" -> "(*github.com/urfave/cli.Context).String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.withdraw" -> "github.com/meshplus/pier/cmd/pier.initClientWithKeyPath" [  ]
    "github.com/meshplus/pier/cmd/pier.withdraw" -> "(github.com/meshplus/bitxhub-model/constant.BoltContractAddress).Address" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.withdraw" -> "github.com/meshplus/go-bitxhub-client.String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.withdraw" -> "(*github.com/meshplus/bitxhub-model/pb.Receipt).IsSuccess" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.withdraw" -> "(*github.com/meshplus/go-bitxhub-client.ChainClient).InvokeBVMContract" [ style="dashed" color="saddlebrown" ]
    "github.com/urfave/cli.HandleAction" -> "github.com/meshplus/pier/cmd/pier.withdraw" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.init$1" -> "(*github.com/urfave/cli.Context).GlobalString" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.init$1" -> "github.com/meshplus/pier/internal/repo.PathRootWithDefault" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.init$1" -> "github.com/meshplus/bitxhub-kit/crypto/asym.RestorePrivateKey" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.init$1" -> "(*github.com/meshplus/bitxhub-kit/types.Address).String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.init$1" -> "(*github.com/meshplus/bitxhub-kit/crypto/asym/ecdsa.PrivateKey).PublicKey" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.init$1" -> "(*github.com/meshplus/bitxhub-kit/crypto/asym/ecdsa.PublicKey).Address" [ style="dashed" color="saddlebrown" ]
    "github.com/urfave/cli.HandleAction" -> "github.com/meshplus/pier/cmd/pier.init$1" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.init$2" -> "(*github.com/urfave/cli.Context).GlobalString" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.init$2" -> "github.com/meshplus/pier/internal/repo.PathRootWithDefault" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.init$2" -> "github.com/meshplus/bitxhub-kit/fileutil.Exist" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.init$2" -> "github.com/meshplus/pier/internal/repo.Initialize" [ color="saddlebrown" ]
    "github.com/urfave/cli.HandleAction" -> "github.com/meshplus/pier/cmd/pier.init$2" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.getIBTP" -> "(*github.com/urfave/cli.Context).String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.getIBTP" -> "(*github.com/urfave/cli.Context).GlobalString" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.getIBTP" -> "github.com/meshplus/pier/internal/repo.PathRootWithDefault" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.getIBTP" -> "github.com/meshplus/pier/internal/repo.UnmarshalConfig" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.getIBTP" -> "github.com/meshplus/pier/internal/repo.KeyPath" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.getIBTP" -> "github.com/meshplus/pier/cmd/pier.loadClient" [  ]
    "github.com/meshplus/pier/cmd/pier.getIBTP" -> "(github.com/meshplus/bitxhub-model/constant.BoltContractAddress).Address" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.getIBTP" -> "github.com/meshplus/go-bitxhub-client.String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.getIBTP" -> "github.com/meshplus/bitxhub-kit/types.NewHash" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.getIBTP" -> "(*github.com/meshplus/bitxhub-kit/types.Hash).String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.getIBTP" -> "(*github.com/meshplus/go-bitxhub-client.ChainClient).InvokeBVMContract" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.getIBTP" -> "(*github.com/meshplus/go-bitxhub-client.ChainClient).GetTransaction" [ style="dashed" color="saddlebrown" ]
    "github.com/urfave/cli.HandleAction" -> "github.com/meshplus/pier/cmd/pier.getIBTP" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.p2pID" -> "(*github.com/urfave/cli.Context).GlobalString" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.p2pID" -> "github.com/meshplus/pier/internal/repo.PathRootWithDefault" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.p2pID" -> "github.com/meshplus/pier/internal/repo.LoadNodePrivateKey" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.p2pID" -> "github.com/meshplus/bitxhub-kit/crypto/asym.PrivKeyToStdKey" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.p2pID" -> "github.com/libp2p/go-libp2p-core/crypto.KeyPairFromStdKey" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.p2pID" -> "github.com/libp2p/go-libp2p-core/peer.IDFromPublicKey" [ color="saddlebrown" ]
    "github.com/urfave/cli.HandleAction" -> "github.com/meshplus/pier/cmd/pier.p2pID" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.deployRule" -> "(*github.com/urfave/cli.Context).String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.deployRule" -> "github.com/meshplus/pier/cmd/pier.initClientWithKeyPath" [  ]
    "github.com/meshplus/pier/cmd/pier.deployRule" -> "github.com/fatih/color.Red" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.deployRule" -> "(*github.com/meshplus/bitxhub-kit/types.Address).String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.deployRule" -> "github.com/fatih/color.Green" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.deployRule" -> "(github.com/meshplus/bitxhub-model/constant.BoltContractAddress).Address" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.deployRule" -> "github.com/meshplus/go-bitxhub-client.String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.deployRule" -> "(*github.com/meshplus/bitxhub-model/pb.Receipt).IsSuccess" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.deployRule" -> "github.com/tidwall/gjson.Get" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.deployRule" -> "(github.com/tidwall/gjson.Result).String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.deployRule" -> "(*github.com/meshplus/go-bitxhub-client.ChainClient).DeployContract" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.deployRule" -> "(*github.com/meshplus/go-bitxhub-client.ChainClient).InvokeBVMContract" [ style="dashed" color="saddlebrown" ]
    "github.com/urfave/cli.HandleAction" -> "github.com/meshplus/pier/cmd/pier.deployRule" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.updateMasterRule" -> "(*github.com/urfave/cli.Context).String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.updateMasterRule" -> "github.com/meshplus/pier/cmd/pier.initClientWithKeyPath" [  ]
    "github.com/meshplus/pier/cmd/pier.updateMasterRule" -> "(github.com/meshplus/bitxhub-model/constant.BoltContractAddress).Address" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.updateMasterRule" -> "github.com/meshplus/go-bitxhub-client.String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.updateMasterRule" -> "(*github.com/meshplus/bitxhub-model/pb.Receipt).IsSuccess" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.updateMasterRule" -> "github.com/fatih/color.Red" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.updateMasterRule" -> "github.com/tidwall/gjson.Get" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.updateMasterRule" -> "(github.com/tidwall/gjson.Result).String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.updateMasterRule" -> "github.com/fatih/color.Green" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.updateMasterRule" -> "(*github.com/meshplus/go-bitxhub-client.ChainClient).InvokeBVMContract" [ color="saddlebrown" style="dashed" ]
    "github.com/urfave/cli.HandleAction" -> "github.com/meshplus/pier/cmd/pier.updateMasterRule" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.logoutRule" -> "(*github.com/urfave/cli.Context).String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.logoutRule" -> "github.com/meshplus/pier/cmd/pier.initClientWithKeyPath" [  ]
    "github.com/meshplus/pier/cmd/pier.logoutRule" -> "(github.com/meshplus/bitxhub-model/constant.BoltContractAddress).Address" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.logoutRule" -> "github.com/meshplus/go-bitxhub-client.String" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.logoutRule" -> "(*github.com/meshplus/bitxhub-model/pb.Receipt).IsSuccess" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.logoutRule" -> "github.com/fatih/color.Red" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.logoutRule" -> "github.com/fatih/color.Green" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.logoutRule" -> "(*github.com/meshplus/go-bitxhub-client.ChainClient).InvokeBVMContract" [ style="dashed" color="saddlebrown" ]
    "github.com/urfave/cli.HandleAction" -> "github.com/meshplus/pier/cmd/pier.logoutRule" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.start" -> "github.com/meshplus/pier/cmd/pier.getVersion" [  ]
    "github.com/meshplus/pier/cmd/pier.start" -> "(*github.com/urfave/cli.Context).GlobalString" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.start" -> "github.com/meshplus/pier/internal/repo.PathRootWithDefault" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.start" -> "github.com/meshplus/pier/internal/repo.SetPath" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.start" -> "github.com/meshplus/pier/internal/repo.UnmarshalConfig" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.start" -> "github.com/meshplus/bitxhub-kit/log.WithReportCaller" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.start" -> "github.com/meshplus/bitxhub-kit/log.WithPersist" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.start" -> "github.com/meshplus/bitxhub-kit/log.WithFilePath" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.start" -> "github.com/meshplus/bitxhub-kit/log.WithFileName" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.start" -> "github.com/meshplus/bitxhub-kit/log.WithMaxSize" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.start" -> "github.com/meshplus/bitxhub-kit/log.WithMaxAge" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.start" -> "github.com/meshplus/bitxhub-kit/log.WithRotationTime" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.start" -> "github.com/meshplus/bitxhub-kit/log.Initialize" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.start" -> "github.com/meshplus/pier/internal/loggers.InitializeLogger" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.start" -> "(*github.com/meshplus/pier/internal/app.Pier).Type" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.runPProf" -> "github.com/meshplus/pier/cmd/pier.runPProf$1" [ arrowhead="normalnoneodot" ]
    "github.com/meshplus/pier/cmd/pier.start" -> "github.com/meshplus/pier/cmd/pier.runPProf" [  ]
    "github.com/meshplus/pier/cmd/pier.handleShutdown$1" -> "(*github.com/meshplus/pier/internal/app.Pier).Stop" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.handleShutdown$1" -> "(*github.com/sirupsen/logrus.Entry).Error" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.handleShutdown" -> "github.com/meshplus/pier/cmd/pier.handleShutdown$1" [ arrowhead="normalnoneodot" ]
    "github.com/meshplus/pier/cmd/pier.start" -> "github.com/meshplus/pier/cmd/pier.handleShutdown" [  ]
    "github.com/meshplus/pier/cmd/pier.start" -> "(*github.com/meshplus/pier/internal/app.Pier).Start" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.checkPlugin" -> "github.com/meshplus/pier/internal/repo.PluginPath" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.start" -> "github.com/meshplus/pier/cmd/pier.checkPlugin" [  ]
    "github.com/meshplus/pier/cmd/pier.start" -> "github.com/meshplus/pier/internal/app.NewUnionPier" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.start" -> "github.com/meshplus/pier/internal/app.NewPier" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.start" -> "(*github.com/sirupsen/logrus.Entry).Info" [ color="saddlebrown" ]
    "github.com/urfave/cli.HandleAction" -> "github.com/meshplus/pier/cmd/pier.start" [ color="saddlebrown" style="dashed" ]
    "github.com/meshplus/pier/cmd/pier.init$3" -> "github.com/meshplus/pier/cmd/pier.getVersion" [  ]
    "github.com/urfave/cli.HandleAction" -> "github.com/meshplus/pier/cmd/pier.init$3" [ style="dashed" color="saddlebrown" ]
    "(*github.com/urfave/cli.App).Run" -> "github.com/urfave/cli.HandleAction" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "(*github.com/urfave/cli.App).Run" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "github.com/fatih/color.Red" [ color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "(*google.golang.org/grpc/internal/status.Error).Error" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "(*github.com/libp2p/go-yamux.Error).Error" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "(*github.com/urfave/cli.errRequiredFlags).Error" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "(*go.uber.org/multierr.multiError).Error" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "(*github.com/syndtr/goleveldb/leveldb/storage.ErrCorrupted).Error" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "(github.com/libp2p/go-mplex.timeout).Error" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "(*github.com/urfave/cli.ExitError).Error" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "(golang.org/x/net/http2.GoAwayError).Error" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "(*github.com/gogo/protobuf/proto.invalidUTF8Error).Error" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "(*github.com/pkg/errors.withMessage).Error" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "(golang.org/x/net/http2.connError).Error" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "(*github.com/gorilla/websocket.CloseError).Error" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "(*github.com/ipfs/go-ipfs-api.Error).Error" [ color="saddlebrown" style="dashed" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "(*github.com/go-playground/universal-translator.ErrBadPluralDefinition).Error" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "(github.com/libp2p/go-libp2p-core/pnet.pnetErr).Error" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "(golang.org/x/net/http2.StreamError).Error" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "(*github.com/gorilla/websocket.netError).Error" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "(google.golang.org/grpc/internal/transport.ConnectionError).Error" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "(*github.com/gogo/protobuf/proto.RequiredNotSetError).Error" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "(*github.com/libp2p/go-libp2p-swarm.DialError).Error" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "(*github.com/go-playground/universal-translator.ErrMissingLocale).Error" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "(golang.org/x/net/http2.ConnectionError).Error" [ color="saddlebrown" style="dashed" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "(github.com/urfave/cli.MultiError).Error" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "(google.golang.org/grpc/internal/transport.PerformedIOError).Error" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "(*github.com/syndtr/goleveldb/leveldb/errors.ErrCorrupted).Error" [ color="saddlebrown" style="dashed" ]
    "github.com/meshplus/pier/cmd/pier.main" -> "(*github.com/hyperledger/fabric/bccsp.IdemixIssuerPublicKeyImporterError).Error" [ style="dashed" color="saddlebrown" ]
    "github.com/meshplus/pier/cmd/pier.init" -> "github.com/meshplus/bitxhub-kit/log.NewWithModule" [ color="saddlebrown" ]
}
